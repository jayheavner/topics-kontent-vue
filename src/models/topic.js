import {
  ContentItem,
  Elements
} from '@kentico/kontent-delivery';

/**
 * Generated by '@kentico/kontent-model-generator@3.1.0'
 * Timestamp: Tue Feb 04 2020 13:38:01 GMT-0500 (Eastern Standard Time)
 */
export class Topic extends ContentItem {
  constructor() {
    super({
      richTextResolver: topic => {
        debugger;
      },
      propertyResolver: elementName => {
        debugger;
        if (elementName === 'hero_text') {
          return 'heroText';
        }
        if (elementName === 'linked_highlighted_video') {
          return 'linkedHighlightedVideo';
        }
        if (elementName === 'key_locations') {
          return 'keyLocations';
        }
        if (elementName === 'schedule_items') {
          return 'scheduleItems';
        }
        if (elementName === 'exhibitor_items') {
          return 'exhibitorItems';
        }
        if (elementName === 'linked_topic') {
          return 'linkedTopic';
        }
        if (elementName === 'linked_videos') {
          return 'linkedVideos';
        }
        if (elementName === 'more_about_text') {
          return 'about';
        }
        if (elementName === 'background_image') {
          return 'backgroundImage';
        }
        if (elementName === 'linked_bottom_content') {
          return 'linkedBottomContent';
        }
        if (elementName === 'featured_section_content') {
          return 'promo';
        }
        if (elementName === 'callout_text') {
          return 'calloutText';
        }
        if (elementName === 'linked_topic_content') {
          return 'linkedTopicContent';
        }
        if (elementName === 'callout_statistic') {
          return 'calloutStatistic';
        }
        return elementName;
      }
    });
  }
}

function flattenArray(array, prop) {
  let newArray = [];
  for (const item of array) {
    newArray.push(flatten(item));
  }
  if (newArray.length === 1)
    return newArray[0];
  else
    return newArray;
}

export function flatten(obj) {
  if (!obj) return null;
  if (hasOwnProperty(obj, 'value')) {
    return obj.value
  }
  let o = {};
  for (const prop in obj) {
    let t = false;
    try {
    t = hasOwnProperty(obj[prop], 'value');
    } catch (ex) {
      debugger;
    }
    if (t)
      if (obj[prop].type === 'asset') {
        o[prop] = obj[prop].value[0];
      } else if (Array.isArray(obj[prop].value)) {
      let val = flattenArray(obj[prop].value, prop);
      o[prop] = val;
    } else
      o[prop] = obj[prop].value
  }
  return o;
}
// export class Movie extends ContentItem {
//   public title: Elements.TextElement;
//   public stars: Elements.LinkedItemsElement<Actor>[];
// }

function hasOwnProperty(obj, prop) {
  var proto = obj.__proto__ || obj.constructor.prototype;
  return (prop in obj) &&
    (!(prop in proto) || proto[prop] !== obj[prop]);
}